//: [Previous](@previous)

/*:
 # Animations
 
 Animations are a lot easier to achieve in SwiftUI than in UIKit, especially for the most used animations. You tell SwiftUI how to draw your appâ€™s user interface for different states, and then rely on SwiftUI to make interface updates when the state changes.

 SwiftUI animates the effects that many built-in view modifiers produce, like those that set a scale or opacity value. You can animate other values by making your custom views conform to the **Animatable** protocol, and telling SwiftUI about the value you want to animate.
 
 There are 3 ways to add animations:
 - by attaching the animation() modifier to a view
 - by adding the animation() modifier to a binding
 - explicitly asking SwiftUI to animate changes occurring as the result of a state change.
 
 In SwiftUI, we have two type of animations, **explicit** and **implicit**.
 */

//: [Next](@next)
